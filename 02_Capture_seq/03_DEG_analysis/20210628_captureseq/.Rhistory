load("~/Documents/Projects/Soy_RNAseq/20210208_captureseq/20210628_data_analysis/03_DEG_analysis/20210628_captureseq/.RData")
library(apeglm)
library(tximport)
library(DESeq2)
library("pheatmap")
library(ggplot2)
library(calibrate)
library("RColorBrewer")
library(dplyr)
library(reshape2)
library(tidyverse)
library(ComplexHeatmap)
library(circlize)
files_names <- c("TC_1_1",
"TC_1_2",
"TC_1_3",
"TC_1_4",
"TC_1_5",
"TC_1_6",
"TC_1_7",
"TC_1_8")
files <- file.path(files <- "/Users/aselawijeratne/Documents/Projects/Soy_RNAseq/20210208_captureseq/20210628_data_analysis/03_kalisto_alginment", files_names, "abundance.tsv")
#import files into Rstudio using txiport
txi.kallisto.tsv <- tximport(files,
type = "kallisto",
geneIdCol = "target_id",
ignoreAfterBar = TRUE,
txOut=TRUE)
# to look at the first part of the count table
head(txi.kallisto.tsv$counts, n=10)
#sample that describe control and treatment samples
sampleTable <- data.frame(condition = factor(c(rep("race1", each =3),
rep("mock", each = 3),
rep("race25", each=2))))
#both these commands will relabel the raw names of the sampleTable
rownames(sampleTable) <- files_names
colnames(txi.kallisto.tsv$counts) <- files_names
#create data object for DESeq function
dds <- DESeqDataSetFromTximport(txi.kallisto.tsv, sampleTable, ~condition)
#perform the DE analysis - statistical analysis will be performed for each gene
dds <- DESeq(dds)
keep <- rowMeans(counts(dds)) > 20
dds <- dds[keep,]
#get the results fromt the dds and assign it to res variable
res_Race1_vs_mock <- results(dds, name="condition_race1_vs_mock")
res_Race25_vs_mock <- results(dds, name="condition_race25_vs_mock")
res_Race1_Race25 <- results(dds, c('condition', "race1", "Race25"))
getDE_genes <- function(res_counts, padj_cutoff=0.05, comparison){
DE_dataframe <- as.data.frame(res_counts[!is.na(res_counts$padj) & res_counts$padj <= padj_cutoff, ])
DE_dataframe <- DE_dataframe[, c(1, 2, 6)]
colnames(DE_dataframe) <- c(paste(colnames(DE_dataframe), "_", comparison, sep = ""))
DE_dataframe$geneId <- row.names(DE_dataframe)
return(DE_dataframe)
}
res_Race1_vs_mock_sig <- getDE_genes(res_Race1_vs_mock, padj_cutoff=1, "Race1_vs_mock")
res_Race25_vs_mock_sig <- getDE_genes(res_Race25_vs_mock, padj_cutoff=1, "Race25_vs_mock")
res_Race1_Race25_sig <- getDE_genes(res, padj_cutoff=0.05, "Race1_Race25")
countsdds$geneId <- row.names(countsdds)
countsdds <- as.data.frame(counts(dds, normalized = TRUE))
countsdds <- as.data.frame(counts(dds, normalized = TRUE))
countsdds$geneId <- row.names(countsdds)
colnames(countsdds) <-  c("Race1_1", "Race_2",	"Race_3", "Mock1",	"Mock2",	"Mock3",	"Race25_1", "Race25_2")
head(countsdds)
countdds_sig_genes <- countsdds %>%
full_join(res_Race1_vs_mock_sig, by = "geneId") %>%
full_join(res_Race25_vs_mock_sig, by = "geneId")
head(res_Race1_vs_mock_sig)
head(res_Race25_vs_mock_sig)
head(countsdds)
countsdds <- as.data.frame(counts(dds, normalized = TRUE))
head(countsdds)
colnames(countsdds) <-  c("Race1_1", "Race_2",	"Race_3", "Mock1",	"Mock2",	"Mock3",	"Race25_1", "Race25_2")
head(countsdds)
countdds_sig_genes <- countsdds %>%
full_join(mutate(geneId = rownames(countsdds)), res_Race1_vs_mock_sig, by = "geneId")
rownames_to_column(countsdds)
countdds_sig_genes <- countsdds %>%
rownames_to_column(countsdds) %>%
full_join(res_Race1_vs_mock_sig, by = c("rowname" = "geneId")) %>%
full_join(res_Race25_vs_mock_sig, by = c("rowname" = "geneId"))
countdds_sig_genes <- countsdds %>%
full_join(rownames_to_column(countsdds), res_Race1_vs_mock_sig, by = c("rowname" = "geneId")) %>%
full_join(rownames_to_column(countsdds), res_Race25_vs_mock_sig, by = c("rowname" = "geneId"))
countsdds <- rownames_to_column(countsdds)
head(countsdds)
colname(countsdds)[1] <- "geneId"
colnames(countsdds)[1] <- "geneId"
head(countsdds)
countdds_sig_genes <- countsdds %>%
full_join(res_Race1_vs_mock_sig, by =  "geneId") %>%
full_join(res_Race25_vs_mock_sig, by = "geneId")
head(countdds_sig_genes)
countdds_sig_genes <- countdds_sig_genes %>%
mutate(Race25_vs_mock_sig = if_else(padj_Race25_vs_mock <= 0.05, "yes", "no")) %>%
mutate(Race1_vs_mock_sig = if_else(padj_Race1_vs_mock <= 0.05, "yes", "no"))
head(countdds_sig_genes)
countdds_sig_genes$geneId <- gsub(".{2}$", "", countdds_sig_genes$geneId)
write.csv(countdds_sig_genes, file="20221222_Capture_seq.csv", row.names = FALSE)
df_log_ratio <- read.csv("df_log_ratio.csv",sep=",")
countdds_sig_genes_all <- merge(countdds_sig_genes, df_log_ratio, by.x = "geneId", by.y ="X", all.x =TRUE)
countdds_sig_genes_all <- countdds_sig_genes_all %>%
rename(Race1_mock = log2FoldChange_Race1_vs_mock,
Race25_mock = log2FoldChange_Race25_vs_mock,
Race1_mock_RNAseq = Rps1_k)
hub_genes <- countdds_sig_genes_all[countdds_sig_genes_all$geneId %in% house_keeping_names$V1,]
house_keeping <- c("
Glyma.20G141600
Glyma.12G020500
Glyma.12G051100
Glyma.20G136000
Glyma.12G024700
Glyma.08G182200")
house_keeping_names = read.table(textConnection(house_keeping),header=FALSE)
house_keeping_df <- countsdds[row.names(countsdds) %in%  house_keeping_names$V1, ]
View(house_keeping_names)
View(house_keeping_df)
View(countdds_sig_genes_all)
house_keeping_df <- countsdds[countsdds$geneId %in%  house_keeping_names$V1, ]
View(house_keeping_df)
house_keeping_df <- countdds_sig_genes_all[countdds_sig_genes_all$geneId %in% house_keeping_names$V1, ]
View(house_keeping_df)
library(apeglm)
library(tximport)
library(DESeq2)
library("pheatmap")
library(ggplot2)
library(calibrate)
library("RColorBrewer")
library(dplyr)
library(reshape2)
library(tidyverse)
library(ComplexHeatmap)
library(circlize)
