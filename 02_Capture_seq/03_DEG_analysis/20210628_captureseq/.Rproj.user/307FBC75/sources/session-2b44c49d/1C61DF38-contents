
library(apeglm)
library(tximport)
library(DESeq2)
library("pheatmap")
library(ggplot2)
library(calibrate)
library("RColorBrewer")
library(dplyr)
library(reshape2)
library(tidyverse)
library(ComplexHeatmap)
library(circlize)
############################################
#names that you want to import 


files_names <- c("TC_1_1", 
                 "TC_1_2",
                 "TC_1_3",
                 "TC_1_4",
                 "TC_1_5",
                 "TC_1_6",
                 "TC_1_7",
                 "TC_1_8")
files <- file.path(files <- "/Users/aselawijeratne/Documents/Projects/Soy_RNAseq/20210208_captureseq/20210628_data_analysis/03_kalisto_alginment", files_names, "abundance.tsv")
#import files into Rstudio using txiport 
txi.kallisto.tsv <- tximport(files, 
                             type = "kallisto", 
                             geneIdCol = "target_id", 
                             ignoreAfterBar = TRUE, 
                             txOut=TRUE)
# to look at the first part of the count table 
head(txi.kallisto.tsv$counts, n=10)

#sample that describe control and treatment samples 
sampleTable <- data.frame(condition = factor(c(rep("race1", each =3),
                                             rep("mock", each = 3), 
                                    
                                             rep("race25", each=2))))

#both these commands will relabel the raw names of the sampleTable 
rownames(sampleTable) <- files_names
colnames(txi.kallisto.tsv$counts) <- files_names



#create data object for DESeq function
dds <- DESeqDataSetFromTximport(txi.kallisto.tsv, sampleTable, ~condition)

#perform the DE analysis - statistical analysis will be performed for each gene
dds <- DESeq(dds)
keep <- rowMeans(counts(dds)) > 20

dds <- dds[keep,]

#get the results fromt the dds and assign it to res variable 
res_Race1_vs_mock <- results(dds, name="condition_race1_vs_mock")

res_Race25_vs_mock <- results(dds, name="condition_race25_vs_mock")

res_Race1_Race25 <- results(dds, c('condition', "race1", "Race25"))

getDE_genes <- function(res_counts, padj_cutoff=0.05, comparison){
  DE_dataframe <- as.data.frame(res_counts[!is.na(res_counts$padj) & res_counts$padj <= padj_cutoff, ])
  DE_dataframe <- DE_dataframe[, c(1, 2, 6)]
  colnames(DE_dataframe) <- c(paste(colnames(DE_dataframe), "_", comparison, sep = ""))
  DE_dataframe$geneId <- row.names(DE_dataframe)
  return(DE_dataframe)
}
res_Race1_vs_mock_sig <- getDE_genes(res_Race1_vs_mock, padj_cutoff=1, "Race1_vs_mock")

res_Race25_vs_mock_sig <- getDE_genes(res_Race25_vs_mock, padj_cutoff=1, "Race25_vs_mock")

res_Race1_Race25_sig <- getDE_genes(res, padj_cutoff=0.05, "Race1_Race25")



countsdds <- as.data.frame(counts(dds, normalized = TRUE))

colnames(countsdds) <-  c("Race1_1", "Race_2",	"Race_3", "Mock1",	"Mock2",	"Mock3",	"Race25_1", "Race25_2")
countsdds <- rownames_to_column(countsdds)
colnames(countsdds)[1] <- "geneId"
head(countsdds)


countdds_sig_genes <- countsdds %>% 
  full_join(res_Race1_vs_mock_sig, by =  "geneId") %>%
  full_join(res_Race25_vs_mock_sig, by = "geneId")

countdds_sig_genes <- countdds_sig_genes %>%
  mutate(Race25_vs_mock_sig = if_else(padj_Race25_vs_mock <= 0.05, "yes", "no")) %>%
  mutate(Race1_vs_mock_sig = if_else(padj_Race1_vs_mock <= 0.05, "yes", "no"))

head(countdds_sig_genes)       
  

countdds_sig_genes$geneId <- gsub(".{2}$", "", countdds_sig_genes$geneId)


write.csv(countdds_sig_genes, file="20221222_Capture_seq.csv", row.names = FALSE)

df_log_ratio <- read.csv("df_log_ratio.csv",sep=",")

countdds_sig_genes_all <- merge(countdds_sig_genes, df_log_ratio, by.x = "geneId", by.y ="X", all.x =TRUE)
countdds_sig_genes_all <- countdds_sig_genes_all %>% 
  rename(Race1_mock = log2FoldChange_Race1_vs_mock,
         Race25_mock = log2FoldChange_Race25_vs_mock,
         Race1_mock_RNAseq = Rps1_k)

house_keeping <- c("
Glyma.20G141600
Glyma.12G020500
Glyma.12G051100
Glyma.20G136000
Glyma.12G024700
Glyma.08G182200")

house_keeping_names = read.table(textConnection(house_keeping),header=FALSE)
house_keeping_df <- countdds_sig_genes_all[countdds_sig_genes_all$geneId %in% house_keeping_names$V1, ]
hub_genes <- countdds_sig_genes_all[countdds_sig_genes_all$geneId %in% house_keeping_names$V1,]

hub_gene_foldchange <- hub_genes[, c(1,11, 14, 16:25)]

hub_gene_foldchange_matrix
hub_gene_foldchange_matrix <- hub_genes %>% 
  select(-geneId) %>% 
  select(c("Race1_mock", "Race25_mock", "Race1_mock_RNAseq")) %>%
  
  as.matrix()
  
rownames(hub_gene_foldchange_matrix) <- hub_genes$geneId
Heatmap(hub_gene_foldchange_matrix, km = 5, col = colorRamp2(c(-4, 0, 4), c("green", "white", "red")), show_column_names = TRUE, show_row_names = FALSE ) +
  Heatmap(as.matrix(hub_genes[, c(16,17)]),  name = "Statical significance", show_row_names = FALSE, width = unit(20, "mm")) 

table(hub_genes[, c(16,17)])

####house keeping genes
known_TF

house_keeping_df <- countdds_sig_genes_all[countdds_sig_genes_all$geneId %in% known_TF_names$V1,]


house_keeping_df[is.na(house_keeping_df)] <- 0

house_keeping_matrix <- house_keeping_df %>% 
  select(-geneId) %>% 
  select(c("Race1_mock", "Race25_mock", "Race1_mock_RNAseq")) %>%
  as.matrix()


rownames(house_keeping_matrix) <- house_keeping_df$geneId
Heatmap(house_keeping_matrix, km = 5, col = colorRamp2(c(-4, 0, 4), c("green", "white", "red")), show_column_names = TRUE, show_row_names = FALSE,
        show_row_dend = FALSE, show_column_dend = FALSE) +
  Heatmap(as.matrix(house_keeping_df[, c(16,17)]),  name = "Statical significance", show_row_names = FALSE, width = unit(20, "mm")) 


###########pathogen induce genes
pathogen_genes_names

pathogen_genes_df <- countdds_sig_genes_all[countdds_sig_genes_all$geneId %in% pathogen_genes_names$V1,]


pathogen_genes_df[is.na(pathogen_genes_df)] <- 0

pathogen_genes_matrix <- pathogen_genes_df %>% 
  select(-geneId) %>% 
  select(c("Race1_mock", "Race25_mock", "Race1_mock_RNAseq")) %>%
  as.matrix()

ha1 = rowAnnotation(statistical_significance = as.matrix(pathogen_genes_df[, c(16,17)]), annotation_legend_param = list())
lgd = Legend(labels = c("Yes", "No"), title = "statistical significance", legend_gp = gpar(fill = 1:2),
             title_position = "leftcenter-rot")
rownames(pathogen_genes_matrix) <- pathogen_genes_df$geneId
ht_list <- Heatmap(pathogen_genes_matrix, km = 5, col = colorRamp2(c(-6, 0, 6), c("green", "white", "red")), show_column_names = TRUE,  show_row_names = FALSE,
        show_row_dend = FALSE, show_column_dend = FALSE, right_annotation = ha1) 
draw(ht_list, heatmap_legend_side = "right", annotation_legend_side = "bottom") +
  Heatmap(as.matrix(pathogen_genes_df[, c(16,17)]), name = "statistical significance", show_row_names = FALSE, width = unit(20, "mm")) 




########################RNAseq data ####################
RNAseq_data <- read.csv("all_sign_genes_function.csv",sep=",")

RNAseq_sig_genes <- RNAseq_data  %>%
  select(c("geneId", "log2FoldChange_Race1_vs_mock", "log2FoldChange_Race25_vs_mock", 
           "padj_Race25_vs_mock", "padj_Race1_vs_mock"))

RNAseq_sig_genes <- RNAseq_sig_genes   %>%
  mutate(RNAseq_Race25_vs_mock_sig = if_else(padj_Race25_vs_mock <= 0.05, "yes", "no")) %>%
  mutate(RNAseq_Race1_vs_mock_sig = if_else(padj_Race1_vs_mock <= 0.05, "yes", "no"))

RNAseq_sig_genes <- RNAseq_sig_genes   %>% 
  rename(RNAseq_Race1_mock = log2FoldChange_Race1_vs_mock,
         RNAseq_Race25_mock = log2FoldChange_Race25_vs_mock,
         RNAseq_padj_Race1_vs_mock = padj_Race1_vs_mock,
         RNAseq_padj_Race25_vs_mock = padj_Race25_vs_mock)

RNAseq_capture_all <- merge(countdds_sig_genes, RNAseq_sig_genes, by = "geneId", all.x =TRUE)


RNAseq_capture_all <- RNAseq_capture_all %>% 
  rename(Capture_Race1_mock = log2FoldChange_Race1_vs_mock,
         Capture_Race25_mock = log2FoldChange_Race25_vs_mock)

RNAseq_capture_all[is.na(RNAseq_capture_all)] <- 0

hub_genes_RNAseq <- RNAseq_capture_all[RNAseq_capture_all$geneId %in% hubgenes_names$V1,]




hub_gene_RNAseq_matrix <- hub_genes_RNAseq %>% 
  select(-geneId) %>% 
  select(c("Capture_Race1_mock", "Capture_Race25_mock", "RNAseq_Race25_mock", "RNAseq_Race1_mock")) %>%
  
  as.matrix()

rownames(hub_gene_RNAseq_matrix) <- hub_genes_RNAseq$geneId
Heatmap(hub_gene_RNAseq_matrix, km = 5, col = colorRamp2(c(-4, 0, 4), c("green", "white", "red")), show_column_names = TRUE, show_row_names = FALSE ) +
  Heatmap(as.matrix(hub_genes_RNAseq[, c(16, 17, 22, 23)]),  name = "Statical significance", show_row_names = FALSE, width = unit(20, "mm")) 

table(hub_genes_RNAseq[, c(16, 17, 22, 23)])

###########pathogen induce genes
pathogen_genes_names

pathogen_genes_RNAseq <- RNAseq_capture_all[RNAseq_capture_all$geneId %in% pathogen_genes_names$V1,]




pathogen_genes_matrix_RNAseq <- pathogen_genes_RNAseq %>% 
  select(-geneId) %>% 
  select(c("Capture_Race1_mock", "Capture_Race25_mock", "RNAseq_Race25_mock", "RNAseq_Race1_mock")) %>%
  
  as.matrix()


rownames(pathogen_genes_matrix_RNAseq) <- pathogen_genes_RNAseq$geneId
Heatmap(pathogen_genes_matrix_RNAseq, km = 5, col = colorRamp2(c(-6, 0, 6), c("green", "white", "red")), show_column_names = TRUE,  show_row_names = FALSE,
        show_row_dend = FALSE, show_column_dend = FALSE) +
  Heatmap(as.matrix(pathogen_genes_RNAseq[, c(16, 17, 22, 23)]), name = "Statical significance", show_row_names = FALSE, width = unit(20, "mm")) 


####house keeping genes
known_TF

house_keeping_RNAseq <- RNAseq_capture_all[RNAseq_capture_all$geneId %in% known_TF_names$V1,]




house_keeping_RNAseq_matrix <- house_keeping_RNAseq %>% 
  select(-geneId) %>% 
  select(c("Capture_Race1_mock", "Capture_Race25_mock", "RNAseq_Race25_mock", "RNAseq_Race1_mock")) %>%
  as.matrix()


rownames(house_keeping_RNAseq_matrix) <- house_keeping_RNAseq$geneId
Heatmap(house_keeping_RNAseq_matrix, km = 5, col = colorRamp2(c(-4, 0, 4), c("green", "white", "red")), show_column_names = TRUE, show_row_names = FALSE,
        show_row_dend = FALSE, show_column_dend = FALSE) +
  Heatmap(as.matrix(house_keeping_RNAseq[, c(16, 17, 22, 23)]),  name = "Statical significance", show_row_names = FALSE, width = unit(20, "mm")) 

#converting into distance data
vsd <- vst(dds, nsub=nrow(dds), blind=FALSE)
#rld <- rlog(dds, blind=FALSE)
head(assay(vsd), 3)
sampleDists <- dist(t(assay(vsd)))

boxplot(assay(vsd), xlab="", ylab="Log2 counts per million",las=2,main="Normalised Distributions")
plot_data <- plotPCA(vsd,intgroup=c("condition"),returnData=TRUE)
plot_data <- bind_cols(plot_data, sampleTable)

ggplot(plot_data, aes(x = PC1,y=PC2, col=group,label=name)) + 
  geom_point() + geom_text(alpha=0.6)

pathogen_genes <- c("
Glyma.02G028100.1
Glyma.02G028600.1
Glyma.02G268200.1
Glyma.04G131100.1
Glyma.13G252000.1
Glyma.16G195600.1
Glyma.18G177000.1
Glyma.19G011700.1
Glyma.19G188100.1
                ")

pathogen_genes_names = read.table(textConnection(pathogen_genes),header=FALSE)

ntd <- normTransform(dds)

pheatmap(assay(ntd)[pathogen_genes_names$V1,], cluster_rows=FALSE, show_rownames=T,
         cluster_cols=FALSE, labels_col = sampleTable$condition,
         labels_row=pathogen_genes_names$V1)


d <- plotCounts(countsdds, gene="Glyma.10G051500.1", intgroup="condition", 
                returnData=TRUE)
library("ggplot2")
ggplot(d, aes(x=condition, y=count)) + 
  geom_point(position=position_jitter(w=0.1,h=0)) + 
  scale_y_log10(breaks=c(25,100,400))


mat  <- assay(vsd)[ pathogen_genes_names$V1, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("condition")])
pheatmap(mat, annotation_col = anno)

countsdds <- as.data.frame(counts(dds, normalized = TRUE))




pathogen_genes_NC_df <- countsdds[row.names(countsdds) %in%  pathogen_genes_names$V1, ]

colnames(pathogen_genes_NC_df) <- sampleTable$condition
pathogen_genes_NC_df$geneID <- row.names(pathogen_genes_NC_df)
pathogen_genes_NC_df_long <- melt(pathogen_genes_NC_df, id.vars="geneID")           

pathogen_genes_NC_df_long$log_expression <- log(pathogen_genes_NC_df_long$value, 2)
pathogen_genes_NC_df_long$variable <- factor(pathogen_genes_NC_df_long$variable)


pathogen_gg <- ggplot(pathogen_genes_NC_df_long, aes(x=variable, y=log_expression)) + 
  geom_point(position=position_jitter(w=0.1,h=0))
pathogen_gg + facet_wrap( ~ geneID, ncol=2)





###########house keeping 


hub_genes <- c("Glyma.01G044600
                  Glyma.01G045500
                   Glyma.01G047900
                   Glyma.01G049100
                   Glyma.01G088200
                   Glyma.01G128100
                   Glyma.02G019100
                   Glyma.02G071500
                   Glyma.02G162600
                   Glyma.02G232600
                   Glyma.02G258300
                   Glyma.03G042700
                   Glyma.03G163100
                   Glyma.03G225200
                   Glyma.04G033300
                   Glyma.04G170600
                   Glyma.04G238300
                   Glyma.04G249000
                   Glyma.05G018100
                   Glyma.05G144500
                   Glyma.06G040900
                   Glyma.06G085700
                   Glyma.06G125600
                   Glyma.06G149900
                   Glyma.07G052100
                   Glyma.07G126800
                   Glyma.07G198900
                   Glyma.07G235900
                   Glyma.07G262700
                   Glyma.08G056800
                   Glyma.08G135200
                   Glyma.08G202300
                   Glyma.09G014100
                   Glyma.09G109700
                   Glyma.10G118900
                   Glyma.10G142200
                   Glyma.11G035900
                   Glyma.11G043700
                   Glyma.11G049300
                   Glyma.11G096600
                   Glyma.11G242200
                   Glyma.12G022700
                   Glyma.12G137700
                   Glyma.12G216800
                   Glyma.13G062900
                   Glyma.13G117600
                   Glyma.13G139000

")
hubgenes_names = read.table(textConnection(hub_genes),header=FALSE)
house_keeping_df <- countsdds[row.names(countsdds) %in%  house_keeping_names$V1, ]

colnames(house_keeping_df) <- sampleTable$condition
house_keeping_df$geneID <- row.names(house_keeping_df)
house_keeping_df_long <- melt(house_keeping_df, id.vars="geneID")           

house_keeping_df_long$log_expression <- log(house_keeping_df_long$value, 2)
house_keeping_df_long$variable <- factor(house_keeping_df_long$variable)


house_keeping_gg <- ggplot(house_keeping_df_long, aes(x=variable, y=log_expression)) + 
  geom_point(position=position_jitter(w=0.1,h=0))
house_keeping_gg + facet_wrap( ~ geneID, ncol=2)

#############known TF

known_TF <- c("
Glyma.06G125600.1
Glyma.10G051500.1
Glyma.10G142200.1
Glyma.06G320700.1
Glyma.16G047600.1

                   ")
known_TF_names = read.table(textConnection(known_TF),header=FALSE)
known_TF_df <- countsdds[row.names(countsdds) %in%  known_TF_names$V1, ]

colnames(known_TF_df) <- sampleTable$condition
known_TF_df$geneID <- row.names(known_TF_df)
known_TF_df_long <- melt(known_TF_df, id.vars="geneID")           

known_TF_df_long$log_expression <- log(known_TF_df_long$value, 2)
known_TF_df_long$variable <- factor(known_TF_df_long$variable)


known_TF_gg <- ggplot(known_TF_df_long, aes(x=variable, y=log_expression)) + 
  geom_point(position=position_jitter(w=0.1,h=0))
known_TF_gg + facet_wrap( ~ geneID, ncol=2)



####pathogen

pathogen_genes <- c("
Glyma.02G028100
Glyma.02G028600
Glyma.02G268200
Glyma.04G131100
Glyma.13G252000
Glyma.16G195600
Glyma.18G177000
Glyma.19G011700
Glyma.19G188100

                   ")
pathogen_genes_names = read.table(textConnection(pathogen_genes),header=FALSE)



#####DEseq normalizaed and second round data#############

EdgeR_data <- read.csv("EdgeR_norm.csv",sep=",")

EdgeR_capture_hub <- merge(hub_genes_RNAseq, EdgeR_data, x.by='geneId', y.by="geneID")


EdgeR_capture_hub_matrix <- EdgeR_capture_hub %>% 
  select(-geneId) %>% 
  select(c("Capture_Race1_mock", "Capture_Race25_mock", "RNAseq_Race25_mock", "RNAseq_Race1_mock")) %>%
  
  as.matrix()

rownames(hub_gene_RNAseq_matrix) <- hub_genes_RNAseq$geneId
Heatmap(hub_gene_RNAseq_matrix, km = 5, col = colorRamp2(c(-4, 0, 4), c("green", "white", "red")), show_column_names = TRUE, show_row_names = FALSE ) +
  Heatmap(as.matrix(hub_genes_RNAseq[, c(16, 17, 22, 23)]),  name = "Statical significance", show_row_names = FALSE, width = unit(20, "mm")) 

write.csv(EdgeR_capture_hub, file="EdgeR_capture_hub.csv")



